{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The integration can be split into 3 steps:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"choose an integration strategy ("},{"type":"reference","isActive":true,"identifier":"#Cocoapods"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"#Manual"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"add permissions and entitlements to your app"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"implement the integrating code"}]}]}]},{"anchor":"Integration-strategy","level":3,"type":"heading","text":"Integration strategy"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can integrate the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib"},{"type":"text","text":" with cocoapods, carthage or manually. Regardless of the strategy, the framework lives on the Ti&m artifactory instance to which access needs to be provided. If you don’t have access, please contact us and we will set this up for you."}]},{"anchor":"Cocoapods","level":4,"type":"heading","text":"Cocoapods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We recommend to use cocoapods as the simplest and fastest way of integrating "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib"},{"type":"text","text":" into your code. For this type of integration to work, you need the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/jfrog\/cocoapods-art"},{"type":"text","text":". You can get it with:"}]},{"type":"codeListing","syntax":null,"code":["gem install cocoapods-art"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"repo-art uses authentication as specified in your standard "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.gnu.org\/software\/inetutils\/manual\/html_node\/The-_002enetrc-file.html"},{"type":"text","text":" file."}]},{"type":"codeListing","syntax":null,"code":["machine bin.ti8m.ch","login <LOGIN>","password <PASSWORD>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"LOGIN"},{"type":"text","text":" and "},{"type":"codeVoice","code":"PASSWORD"},{"type":"text","text":" are provided by Ti&m, if you don’t have them, please contact us. The next step is to add the artifactory specs repositories:"}]},{"type":"codeListing","syntax":null,"code":["pod repo-art add ti8m-mobile-pods \"https:\/\/bin.ti8m.ch\/artifactory\/api\/pods\/ti8m-mobile-pods\"","pod repo-art add github-cocoapods \"https:\/\/bin.ti8m.ch\/artifactory\/api\/pods\/github-cocoapods\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike the standard "},{"type":"codeVoice","code":"pod repo add"},{"type":"text","text":" command, the "},{"type":"codeVoice","code":"repo-art"},{"type":"text","text":" requires a specific update command to make sure the artifacts are fetched:"}]},{"type":"codeListing","syntax":null,"code":["pod repo-art update ti8m-mobile-pods","pod repo-art update github-cocoapods"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With all the above done, let’s have a look at a sample Podfile:"}]},{"type":"codeListing","syntax":"ruby","code":["# Uncomment the next line to define a global platform for your project","platform :ios, '13.0'","","target 'SampleApp' do","  # Comment the next line if you don't want to use dynamic frameworks","  use_frameworks!","  ","  plugin 'cocoapods-art', :sources => [","  'ti8m-mobile-pods',","  'github-cocoapods'","  ]","  ","  # Pods for SampleApp","  pod 'IDCheckLib', '~> 5.0'","end","","post_install do |installer|","  installer.pods_project.targets.each do |target|","    # Script below fix issue with lottie-ios accordingly to:","    # https:\/\/github.com\/airbnb\/lottie-ios\/issues\/1321","    target.build_configurations.each do |config|","      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'","    end","    # Fix for Xcode 14 https:\/\/github.com\/CocoaPods\/CocoaPods\/issues\/8891#issuecomment-1249151085","    if target.respond_to?(:product_type) and target.product_type == \"com.apple.product-type.bundle\"","      target.build_configurations.each do |config|","          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'","      end","    end","  end","end"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The important part is the plugin section where everything is setup so that the plugin can access the Ti&m pod repositories."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the bottom of the file are two fixes necessary for Xcode14+ code signing changes and for the linking of the binary frameworks, without those your application will crash, so make sure not to omit them."}]}],"type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Please adapt your "},{"type":"codeVoice","code":"Podfile"},{"type":"text","text":" with the above changes and after that, run:"}]},{"type":"codeListing","syntax":null,"code":["pod install"]},{"anchor":"Manual","level":4,"type":"heading","text":"Manual"},{"type":"paragraph","inlineContent":[{"type":"text","text":"TBD"}]},{"anchor":"Permissions-and-entitlements","level":3,"type":"heading","text":"Permissions and entitlements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To successfuly integrate the SDK, the integrating iOS application will need the following permissions:"}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The keys in the below table come from the Info.plist file being presented as source code"}]}],"type":"aside","name":"Important"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Key in the Info.plist"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Required"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Required by"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"NSCameraUsageDescription"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"required"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"IDCheckDocumentVerificationViewController IDCheckSelfieVerificationViewController"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"NFCReaderUsageDescription"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"optional"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"IDCheckEMRTDReader"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"com.apple.developer.nfc.readersession.iso7816.select-identifiers"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"optional"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"IDCheckEMRTDReader"}]}]]],"header":"row"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is how the above values may look in your "},{"type":"emphasis","inlineContent":[{"type":"text","text":".plist"}]},{"type":"text","text":" file:"}]},{"type":"codeListing","syntax":"xml","code":["<key>NFCReaderUsageDescription<\/key>","<string>NFC usage to scan ID chip<\/string>","<key>NSCameraUsageDescription<\/key>","<string>Camera usage to scan ID<\/string>","<key>com.apple.developer.nfc.readersession.iso7816.select-identifiers<\/key>","<array>","    <string>A0000002471001<\/string>","    <string>A0000002472001<\/string>","    <string>00000000000000<\/string>","<\/array>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"IDCheckLib uses CoreNFC so it needs some specific entries in the entitlements file of your integrating application. To achieve that in Xcode 13, do the following:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Click on your project, then select your integrating target from the list"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select the Signing & Capabilities tab"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Click the + button in the top left (left of the All, Debug, Release tabs)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Search for the Near Field Communication Tag Reading and select it"},{"type":"text","text":" "},{"type":"text","text":"At this point the .entitlemets file with the name of your application should be added to your project."}]}]}]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There is a known problem with the automatically created entitlements file, which may prevent you from uploading your application to appstoreconnect. The problem is described "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/forums\/thread\/123483"},{"type":"text","text":". There is a "},{"type":"reference","isActive":true,"identifier":"https:\/\/stackoverflow.com\/questions\/58131299\/xcode-testflight-validate-error-itms-90778-ndef-is-disallowed"},{"type":"text","text":" that we use in our sample app, which is basically to delete the NFC Data Exchange Format field in the .entitlements file."}]}],"type":"aside","name":"Warning"},{"anchor":"Implementation","level":3,"type":"heading","text":"Implementation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most important part is the configuration of the IDCheckLib, after that we will have a look at how to use available functionalities."}]},{"anchor":"Configuration","level":4,"type":"heading","text":"Configuration"},{"type":"codeListing","syntax":"swift","code":["\/\/\/ This struct is used to carry all the critical configuration information for your IDCheckLib integration","public struct IDCheckConfig {","    public let apiURL: String","    public let socketScanURL: String","    public let socketEMRTDURL: String","    public let loggingURL: String","    public let tenantID: String","    public let pollingInterval: Int","    public let certificates: [String]","    public let customHeaders: [String : String]","    ","    \/\/\/ Creates an instance configured with all required parameters","    \/\/\/ - Parameters:","    \/\/\/   - apiURL: url of the api, together with the version e.g. `https:\/\/id-check-int.ti8m.ch\/delegate\/id-check-process-adapter\/v5`","    \/\/\/   - socketScanURL: url of the document scan socket, together with the version and socket release e.g. `wss:\/\/id-check-int.ti8m.ch\/delegate\/id-check-scan\/v2\/documents\/scan\/socket\/?rel=albis`","    \/\/\/   - socketEMRTDURL: url of the nfc scan socket, together with the version and socket release e.g. `wss:\/\/id-check-int.ti8m.ch\/delegate\/id-check-emrtd\/v1\/documents\/emrtd\/socket\/?rel=albis`","    \/\/\/   - loggingURL: your logging URL, can be skipped with an empty string","    \/\/\/   - tenantID: your tennant ID as String","    \/\/\/   - pollingInterval: a desired polling interval in miliseconds as Int","    \/\/\/   - certificates: an array of certificates for connecting to the API, if needed","    \/\/\/   - customHeaders: a dictionary of additional headers used for connecting to the API, if needed","    public init(","        apiURL: String,","        socketScanURL: String,","        socketEMRTDURL: String,","        loggingURL: String,","        tenantID: String,","        pollingInterval: Int = 5000,","        certificates: [String] = [],","        customHeaders: [String : String] = [:]","    )"]},{"anchor":"Logging","level":4,"type":"heading","text":"Logging"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, no logs are printed out from the IDCheckLib. In order to activate them, assign an object that conforms to the "},{"type":"codeVoice","code":"IDCheckLoggerProtocol"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"codeVoice","code":"IDCheckLogger.shared"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["public protocol IDCheckLoggerProtocol {","    func error(_ message: String)","    func warn(_ message: String)","    func info(_ message: String)","    func debug(_ message: String)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["struct CustomLogger: IDCheckLoggerProtocol {","    func error(_ message: String) {","        print(\"[ERROR]: \\(message)\")","    }","","    func warn(_ message: String) {","        print(\"[WARNING]: \\(message)\")","    }","","    func info(_ message: String) {","        print(\"[INFO]: \\(message)\")","    }","","    func debug(_ message: String) {","        print(\"[DEBUG]: \\(message)\")","    }","}","","\/\/\/ ... later on ...","IDCheckLogger.shared = CustomLogger()"]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s also possible to use the default logger provided by the SDK, which prints logs"},{"type":"text","text":" "},{"type":"text","text":"only to the Xcode debugger console. To do so, just use the "},{"type":"codeVoice","code":"IDCheckLogger.default"},{"type":"text","text":" object."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For perfect integration it’s recommended to also log some UI events that can happen in your integrating app. Two such events would be when the user cancels the process or a task. To achieve this the use the LoggingSystem struct which contains the necessary methods:"}]},{"type":"codeListing","syntax":"swift","code":["import IDCheckLib","","@IBAction func didClickCancelTask(_ sender: UIButton) {","    LoggingSystem.logTaskCancelled(self.taskID)","    ","    \/\/ cancel the task in your app","}","","@IBAction func didClickCancelProcess(_ sender: UIButton) {","    LoggingSystem.logProcessCancelled()","    ","    \/\/ cancel the process in your app","}",""]},{"anchor":"Start-process","level":4,"type":"heading","text":"Start process"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is how to start the process:"}]},{"type":"codeListing","syntax":"swift","code":["import IDCheckLib","","let config = IDCheckConfig(\/*your configuration here*\/)","var myProcessAPI: IDCheckProcessAPI?","","func getProcess() {","    IDCheckProcessAPI.createProcess(config) { [weak self, config] process in","        guard let processID = process?.id else {","            \/\/ handle error when creating the process","            return","        }","        self?.myProcessAPI = IDCheckProcessAPI(config: config, processID: processID)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Assuming no errors, your "},{"type":"codeVoice","code":"myProcessAPI"},{"type":"text","text":" variable should now be ready to use. Normally the next thing you want to do is get the next task. You can achieve this with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib\/IDCheckProcessAPI\/getNextTask(skip:completionHandler:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["myProcessAPI?.getNextTask(completionHandler: { task in","    guard let nextTask = task else {","        \/\/ handle error when getting the next task","        return","    }","    ","    \/\/ process the task","})"]},{"anchor":"Document-verification","level":4,"type":"heading","text":"Document verification"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"task_document_verify"},{"type":"text","text":" "},{"type":"text","text":"Minimal example of integrating "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib\/IDCheckDocumentVerificationViewController"},{"type":"text","text":" into your project:"}]},{"type":"codeListing","syntax":"swift","code":["import IDCheckLib","","class DocumentVerificationViewController: UIViewController {","    let processAPI: IDCheckProcessAPI \/\/ your shared API object","    \/\/... initializer and ui code","    override func viewDidAppear(_ animated: Bool) {","        super.viewDidAppear(animated)","        let documentVerificationVC = IDCheckDocumentVerificationViewController(","            config: config,","            documentType: documentType,","            processID: processID,","            scanMode: scanMode,","            taskID: taskID,","            cameraSettings: IDCheckDocumentVerificationCameraSettings(","                compressionQuality: compressionQuality,","                croppingArea: nil,","                hologramScanImagesAmount: hologramScanImagesAmount,","                hologramScanImagesDelay: hologramScanImagesDelay,","                orientation: .landscapeRight,","                resolution: resolution","            )","        )","        documentVerificationVC.delegate = self","        documentVerificationVC.insufficiencyDelegate = self","        self.addChild(documentVerificationVC)","    }","    ","    func executeDocumentVerification(_ taskID: String) {","        processAPI.pollForNoPendingTasks { [weak self] noPendingTasks in","            guard noPendingTasks else {","                \/\/ handle error while polling for task execution","                return","            }","            self?.processAPI.getNextTask { nextTask in","                \/\/ move on to the next taks","            }","        }","    }","}","","extension DocumentVerificationViewController:","    IDCheckDocumentVerificationViewControllerInsufficiencyDelegate {","","    func controllerDidDetectInsufficencies(_ controller: IDCheckDocumentVerificationViewController, insufficencies: String) {","        \/\/ handle all insufficiencies at once, they are passed as comma separated string","    }","    func controllerDidDetectInsufficiency(_ controller: IDCheckDocumentVerificationViewController, insufficiencyIllumination: Bool) {","        \/\/ handle insufficiency","    }","    func controllerDidDetectInsufficiency(_ controller: IDCheckDocumentVerificationViewController, insufficiencyOutOfFocus: Bool) {","        \/\/ handle insufficiency","    }","    func controllerDidDetectInsufficiency(_ controller: IDCheckDocumentVerificationViewController, insufficiencyOutOfFrame: Bool) {","        \/\/ handle insufficiency","    }","    func controllerDidDetectInsufficiency(_ controller: IDCheckDocumentVerificationViewController, insufficiencyNoFaceDetected: Bool) {","        \/\/ handle insufficiency","    }","    func controllerDidDetectInsufficiency(_ controller: IDCheckDocumentVerificationViewController, insufficiencyOpticalFeatureNotFound: Bool) {","        \/\/ handle insufficiency","    }","}","extension DocumentVerificationViewController:","    IDCheckDocumentVerificationViewControllerDelegate {","    func controllerRequire(_ controller: IDCheckDocumentVerificationViewController,","                           page: IDCheckDocumentVerificationPage,","                           lastScan: IDCheckDocumentVerificationPage?) {","        \/\/ handle the require","    }","    ","    func controllerDidDetectElements(_ controller: IDCheckDocumentVerificationViewController, elements: [IDCheckRecognizedArea]) {","        \/\/ handle elements detection","    }","    ","    func controllerDidFinish(_ controller: IDCheckDocumentVerificationViewController, result: IDCheckDocumentVerificationResult) {","        switch result {","        case .taskID(let taskID):","            self.executeDocumentVerification(taskID)","        case .mrz(let mrz):","            \/\/ handle mrz","        }","    }","    ","    func controllerDidReceiveError(_ controller: IDCheckDocumentVerificationViewController, error: IDCheckDocumentVerificationError) {","        \/\/ handle verification error","    }","}"]},{"anchor":"Selfie-verification","level":4,"type":"heading","text":"Selfie verification"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"task_selfie_verify"},{"type":"text","text":" "},{"type":"text","text":"Minimal example of integrating "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib\/IDCheckSelfieVerificationViewController"},{"type":"text","text":" into your project:"}]},{"type":"codeListing","syntax":"swift","code":["import IDCheckLib","","class SelfieVerificationViewController: UIViewController {","    let processAPI: IDCheckProcessAPI \/\/ your shared object","    ","    \/\/... initializer and the ui code","    ","    override func viewDidAppear(_ animated: Bool) {","        super.viewDidAppear(animated)","        let selfieVerificationVC = IDCheckSelfieVerificationViewController(","            config: config,","            processID: processID,","            requiredHeadPoses: requiredHeadPoses,","            cameraSettings: IDCheckSelfieVerificationCameraSettings(","                compressionQuality: compressionQuality,","                headPoseScanInterval: headPoseScanInterval,","                orientation: .portrait,","                resolution: resolution","            )","        )","        selfieVerificationVC.delegate = self","        self.addChild(selfieVerificationVC)","    }","    func executeSelfieVerification(_ collectedHeadPoses: [IDCheckHeadPose : String]) {","        processAPI.selfieVerificationAPI.verifySelfie(collectedHeadPoses) { [weak self] verified in","            guard verified else {","                \/\/ handle selfie verification error","                return","            }","            ","            \/\/ proceed to the next task","            self?.processAPI.pollForNoPendingTasks { [weak self] noPendingTasks in","                guard noPendingTasks else {","                    \/\/ handle error while polling for task execution","                    return","                }","                self?.processAPI.getNextTask { nextTask in","                    \/\/ move on to the next taks","                }","            }","        }","    }","}","extension SelfieVerificationViewController:","    IDCheckSelfieVerificationViewControllerDelegate {","    func selfieVerificationIsExpectingHeadPose(_ headPose: IDCheckHeadPose) {","        \/\/ handle expected head pose","    }","    ","    func selfieVerificationDidDetectHeadPose(_ headPose: IDCheckHeadPose) {","        \/\/ handle detected head pose","    }","    ","    func selfieVerificationDidFinish(_ collectedHeadPoses: [IDCheckHeadPose : String]) {","        executeSelfieVerification(collectedHeadPoses)","    }","    ","    func selfieVerificationDidReceiveError(_ error: IDCheckSelfieVerificationError) {","        \/\/ handle selfie verification error","    }","}"]},{"anchor":"Document-correction-Document-match","level":4,"type":"heading","text":"Document correction (Document match)"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"task_document_match"},{"type":"text","text":" "},{"type":"text","text":"Minimal implementation of the document correction:"}]},{"type":"codeListing","syntax":"swift","code":["import IDCheckLib","","class DocumentMatchViewController: UIViewController {","    let processAPI: IDCheckProcessAPI \/\/ your shared object","    \/\/ ... ui code of form","    override func viewDidLoad() {","        super.viewDidLoad()","        processAPI.documentCorrectionAPI.getDocumentCorrectionData { [weak self] documentData in","            ","            guard let documentCorrection = documentData?.correction else {","                \/\/ handle no correction data error","                return","            }","            ","            \/\/ handle the document correction, for example display it to the user for verification","        }","    }","    ","    func saveDocument() {","        let documentCorrection = IDCheckDocumentCorrection(","            firstName: firstName, \/\/ corrected values provided by the user","            lastName: lastName \/\/ corrected values provided by the user","        )","        ","        processAPI.verifyDocumentCorrection(documentCorrection) { [weak self] result in","            guard result else {","                \/\/ handle error while verifying document match","                return","            }","            ","            \/\/ proceed to the next task","            self?.processAPI.pollForNoPendingTasks { [weak self] noPendingTasks in","                guard noPendingTasks else {","                    \/\/ handle error while polling for task execution","                    return","                }","                self?.processAPI.getNextTask { nextTask in","                    \/\/ move on to the next taks","                }","            }","        }","    }","}"]},{"anchor":"Address-verification","level":4,"type":"heading","text":"Address verification"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"task_address_verify"},{"type":"text","text":" "},{"type":"text","text":"Minimal implementation of the address verification:"}]},{"type":"codeListing","syntax":"swift","code":["import IDCheckLib","","class AddressVerificationViewController: UIViewController {","    let processAPI: IDCheckProcessAPI \/\/ your shared object","    ","    \/\/... ui code of a form for verifying the address","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        processAPI.getAddressVerificationData { verifyAddressTask in","            guard let address = verifyAddressTask?.address else {","                \/\/ handle the error","                return","            }","            ","            \/\/ load the address to your view","        }","    }","    ","    func saveAddress() {","        let address = IDCheckAddress(","            firstName: firstName,","            name: name,","            street: street,","            streetNumber: streetNumber,","            postalCode: postalCode,","            city: city,","            countryCode: countryCode","        )","        self.executeAddressVerification(address)","    }","    ","    func executeAddressVerification(_ address: IDCheckAddress) {","        processAPI.addressVerificationAPI.verifyAddress(address) { [weak self] verified in","            guard verified else {","                \/\/ handle address verification error","                return","            }","            ","            \/\/ proceed to the next task","            self?.processAPI.pollForNoPendingTasks { [weak self] noPendingTasks in","                guard noPendingTasks else {","                    \/\/ handle error while polling for task execution","                    return","                }","                self?.processAPI.getNextTask { nextTask in","                    \/\/ move on to the next taks","                }","            }","        }","    }","}"]},{"anchor":"EMRTD-verification","level":4,"type":"heading","text":"EMRTD verification"},{"type":"paragraph","inlineContent":[{"type":"text","text":"EMRTD stands for Electronic Machine Readable Travel Documents."},{"type":"text","text":" "},{"type":"image","identifier":"task_emrtd_verify_socket"},{"type":"text","text":" "},{"type":"text","text":"Minimal implementation of the EMRTD verification:"}]},{"type":"codeListing","syntax":"swift","code":["import IDCheckLib","","class EMRTDVerificationViewController: UIViewController {","    let processAPI: IDCheckProcessAPI \/\/ your shared object","    private var emrtdReader: IDCheckEMRTDReader?","    ","    \/\/ ... ui code","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        processAPI.getEMRTDVerificationData { emrtdVerifyTask in","            guard let taskID = emrtdVerifyTask?.id,","                  let document = emrtdVerifyTask?.documents?.first else {","                \/\/ handle verification error","                return","            }","            ","            self.emrtdReader = IDCheckEMRTDReader(","                config: processAPI.config,","                chipAccessControlType: chipAccessControlType,","                document: document,","                processID: processAPI.processID,","                taskID: taskID","            )","            self.emrtdReader?.delegate = self","            self.emrtdReader?.startReading()","        }","    }","    func executeEMRTDVerification(_ taskID: String) {","        processAPI.pollForNoPendingTasks { [weak self] noPendingTasks in","            guard noPendingTasks else {","                \/\/ handle error while polling for task execution","                return","            }","            self?.processAPI.getNextTask { nextTask in","                \/\/ move on to the next taks","            }","        }","    }","}","extension EMRTDVerificationViewController: IDCheckEMRTDReaderDelegate {","    func emrtdReaderRequireMessageForStatus(_ status: IDCheckEMRTDReaderStatus) -> String {","        switch status {","        case .waiting:","            return \"WAITING\"","        case .reading(let progress):","            return \"READING\"","        case .failed:","            return \"FAILED\"","        case .succeeded:","            return \"SUCCEEDED\"","        }","    }","    ","    func emrtdReaderDidFinish(_ taskID: String) {","        self.executeEMRTDVerification(taskID)","    }","    ","    func emrtdReaderDidReceiveError(_ error: IDCheckEMRTDReaderError) {","        \/\/ handle the reader error","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/idchecklib\/integration"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/idchecklib\/integration"],"traits":[{"interfaceLanguage":"occ"}]}],"identifier":{"url":"doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib\/Integration","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Step by step guide how to integrate the IDCheckLib into your app."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Integration Guide","role":"article","modules":[{"name":"IDCheckLib"}]},"hierarchy":{"paths":[["doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib"]]},"references":{"doc://ch.ti8m.idcheck.library/documentation/IDCheckLib":{"role":"collection","title":"IDCheckLib","abstract":[{"type":"text","text":"IDCheckLib - document verification"}],"identifier":"doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib","kind":"symbol","type":"topic","url":"\/documentation\/idchecklib"},"task_document_match":{"alt":"Document verification overview","type":"image","identifier":"task_document_match","variants":[{"url":"\/images\/task_document_match.png","traits":["1x","light"]}]},"task_selfie_verify":{"alt":"Document verification overview","type":"image","identifier":"task_selfie_verify","variants":[{"url":"\/images\/task_selfie_verify.png","traits":["1x","light"]}]},"task_address_verify":{"alt":"Address verification overview","type":"image","identifier":"task_address_verify","variants":[{"url":"\/images\/task_address_verify.png","traits":["1x","light"]}]},"https://developer.apple.com/forums/thread/123483":{"title":"here","titleInlineContent":[{"type":"text","text":"here"}],"type":"link","identifier":"https:\/\/developer.apple.com\/forums\/thread\/123483","url":"https:\/\/developer.apple.com\/forums\/thread\/123483"},"https://stackoverflow.com/questions/58131299/xcode-testflight-validate-error-itms-90778-ndef-is-disallowed":{"title":"workaround","titleInlineContent":[{"type":"text","text":"workaround"}],"type":"link","identifier":"https:\/\/stackoverflow.com\/questions\/58131299\/xcode-testflight-validate-error-itms-90778-ndef-is-disallowed","url":"https:\/\/stackoverflow.com\/questions\/58131299\/xcode-testflight-validate-error-itms-90778-ndef-is-disallowed"},"https://www.gnu.org/software/inetutils/manual/html_node/The-_002enetrc-file.html":{"title":"netrc","titleInlineContent":[{"type":"text","text":"netrc"}],"type":"link","identifier":"https:\/\/www.gnu.org\/software\/inetutils\/manual\/html_node\/The-_002enetrc-file.html","url":"https:\/\/www.gnu.org\/software\/inetutils\/manual\/html_node\/The-_002enetrc-file.html"},"task_emrtd_verify_socket":{"alt":"Address verification overview","type":"image","identifier":"task_emrtd_verify_socket","variants":[{"url":"\/images\/task_emrtd_verify_socket.png","traits":["1x","light"]}]},"doc://ch.ti8m.idcheck.library/documentation/IDCheckLib/IDCheckSelfieVerificationViewController":{"role":"symbol","title":"IDCheckSelfieVerificationViewController","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"IDCheckSelfieVerificationViewController"}],"abstract":[],"identifier":"doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib\/IDCheckSelfieVerificationViewController","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IDCheckSelfieVerificationViewController"}],"url":"\/documentation\/idchecklib\/idcheckselfieverificationviewcontroller"},"doc://ch.ti8m.idcheck.library/documentation/IDCheckLib/IDCheckDocumentVerificationViewController":{"role":"symbol","title":"IDCheckDocumentVerificationViewController","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"IDCheckDocumentVerificationViewController"}],"abstract":[{"type":"text","text":"This view controller verifies the documents, it communicates with the integrating application through it’s delegate protocol"}],"identifier":"doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib\/IDCheckDocumentVerificationViewController","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IDCheckDocumentVerificationViewController"}],"url":"\/documentation\/idchecklib\/idcheckdocumentverificationviewcontroller"},"#Manual":{"title":"manual","titleInlineContent":[{"type":"text","text":"manual"}],"type":"link","identifier":"#Manual","url":"#Manual"},"#Cocoapods":{"title":"Cocoapods","titleInlineContent":[{"type":"text","text":"Cocoapods"}],"type":"link","identifier":"#Cocoapods","url":"#Cocoapods"},"task_document_verify":{"alt":"Document verification overview","type":"image","identifier":"task_document_verify","variants":[{"url":"\/images\/task_document_verify.png","traits":["1x","light"]}]},"doc://ch.ti8m.idcheck.library/documentation/IDCheckLib/IDCheckProcessAPI/getNextTask(skip:completionHandler:)":{"role":"symbol","title":"getNextTask(skip:completionHandler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getNextTask"},{"kind":"text","text":"("},{"kind":"externalParam","text":"skip"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?, "},{"kind":"externalParam","text":"completionHandler"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"IDCheckNextTask","preciseIdentifier":"s:10IDCheckLib0A8NextTaskV"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/ch.ti8m.idcheck.library\/documentation\/IDCheckLib\/IDCheckProcessAPI\/getNextTask(skip:completionHandler:)","kind":"symbol","type":"topic","url":"\/documentation\/idchecklib\/idcheckprocessapi\/getnexttask(skip:completionhandler:)"},"https://github.com/jfrog/cocoapods-art":{"title":"cocoapods-art plugin","titleInlineContent":[{"type":"text","text":"cocoapods-art plugin"}],"type":"link","identifier":"https:\/\/github.com\/jfrog\/cocoapods-art","url":"https:\/\/github.com\/jfrog\/cocoapods-art"}},"variantOverrides":[{"patch":[{"op":"replace","path":"\/identifier\/interfaceLanguage","value":"occ"},{"op":"add","path":"\/topicSections","value":null},{"op":"add","path":"\/seeAlsoSections","value":null},{"op":"replace","path":"\/references\/doc:~1~1ch.ti8m.idcheck.library~1documentation~1IDCheckLib~1IDCheckSelfieVerificationViewController\/title","value":"IDCheckSelfieVerificationViewController"},{"op":"replace","path":"\/references\/doc:~1~1ch.ti8m.idcheck.library~1documentation~1IDCheckLib~1IDCheckSelfieVerificationViewController\/fragments","value":[{"kind":"identifier","text":"IDCheckSelfieVerificationViewController"}]},{"op":"replace","path":"\/references\/doc:~1~1ch.ti8m.idcheck.library~1documentation~1IDCheckLib~1IDCheckDocumentVerificationViewController\/title","value":"IDCheckDocumentVerificationViewController"},{"op":"replace","path":"\/references\/doc:~1~1ch.ti8m.idcheck.library~1documentation~1IDCheckLib~1IDCheckDocumentVerificationViewController\/fragments","value":[{"kind":"identifier","text":"IDCheckDocumentVerificationViewController"}]}],"traits":[{"interfaceLanguage":"occ"}]}]}